{"version":3,"sources":["index.js"],"names":["MyForm","props","state","username","vowels","alphabets_small","alphabets_caps","handleChange","bind","handleSubmit","encryption","inputx","i","status","this","input","x","y","z","output","length","check_vowel","event","setState","target","value","preventDefault","randomnum","Math","floor","random","split","map","Number","inputstr","outputstr","match","console","log","document","getElementById","innerHTML","onSubmit","type","onChange","id","React","Component","ReactDOM","render"],"mappings":"kMAMMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,SAAU,IAC3B,EAAKC,OAAS,aACd,EAAKC,gBAAkB,6BACvB,EAAKC,eAAiB,6BAEnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACvB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBATE,E,yEAgBPG,GACX,IACIC,EADAC,GAAS,EAEd,IAAKD,EAAI,EAAIA,EAAE,GAAKA,IACnB,GAAID,GAAUG,KAAKV,OAAOQ,GAAG,CAC5BC,GAAS,EACT,MAGH,OAAOA,I,iCAGKE,EAAMC,EAAEC,GAElB,IACIL,EACAM,EAFAC,EAAS,GAIb,IAAKD,EAAE,EAAGA,EAAIH,EAAMK,OAASF,IAAI,CAChC,GAAgB,KAAZH,EAAMG,GAET,GAAkB,GADDJ,KAAKO,YAAYN,EAAMG,IAChB,CACvB,IAAKN,EAAI,EAAIA,EAAE,GAAKA,IACfG,EAAMG,IAAMJ,KAAKT,gBAAgBO,KAErCO,GADMP,EAAEI,EAAK,GACKF,KAAKT,gBAAgBO,EAAII,GAGzBF,KAAKT,gBAAiBO,EAAII,EAAG,KAKhD,IAAKJ,EAAI,EAAIA,EAAE,GAAKA,IACfG,EAAMG,IAAMJ,KAAKR,eAAeM,KAEpCO,GADKP,EAAEI,EAAK,GACMF,KAAKR,eAAeM,EAAII,GAGxBF,KAAKR,eAAgBM,EAAII,EAAG,SAQ3C,CACH,IAAKJ,EAAI,EAAIA,EAAE,GAAKA,IAChBG,EAAMG,IAAMJ,KAAKT,gBAAgBO,KAErCO,GADMP,EAAEK,EAAK,GACKH,KAAKT,gBAAgBO,EAAIK,GAGzBH,KAAKT,gBAAiBO,EAAIK,EAAG,KAKhD,IAAKL,EAAI,EAAIA,EAAE,GAAKA,IACfG,EAAMG,IAAMJ,KAAKR,eAAeM,KAEpCO,GADKP,EAAEK,EAAK,GACMH,KAAKR,eAAeM,EAAIK,GAGxBH,KAAKR,eAAgBM,EAAIK,EAAG,UAQhDE,GAAkB,IAGnB,OAAOA,I,mCAIIG,GACXR,KAAKS,SAAS,CAACpB,SAAUmB,EAAME,OAAOC,U,mCAG3BH,GACXA,EAAMI,iBAET,IAAIC,EAAYC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,IAC9CA,GAAU,GAAGH,GAAWI,MAAM,IAAIC,IAAIC,QAEtCC,EAAWpB,KAAKZ,MAAMC,SACtBgC,EAAY,GAGVD,EAASE,MADI,kBAElBD,EAAYrB,KAAKJ,WAAWwB,EAAUJ,EAAO,GAAIA,EAAO,IACxDO,QAAQC,IAAI,WAIZD,QAAQC,IAAK,WACbH,EAAY,yBAGbI,SAASC,eAAe,WAAWC,UAAY,mBAAqBN,EAEpEI,SAASC,eAAe,aAAaC,UAAY,yBAA2Bd,EAC5EY,SAASC,eAAe,WAAWC,UAAY,kBAAoBP,I,+BAQhE,OACE,0BAAMQ,SAAU5B,KAAKL,cACnB,gDAEE,2BAAOkC,KAAK,OAAOlB,MAAOX,KAAKZ,MAAMuB,MAAOmB,SAAU9B,KAAKP,gBAE7D,2BAAOoC,KAAK,SAASlB,MAAM,WACjC,uBAAGoB,GAAG,cACN,uBAAGA,GAAG,YACN,uBAAGA,GAAG,iB,GA7IaC,IAAMC,WAmJ3BC,IAASC,OAAO,kBAACjD,EAAD,MAAYuC,SAASC,eAAe,U","file":"static/js/main.0e1f6dfb.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\n  \r\nclass MyForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {username: ''};\r\n\tthis.vowels = \"aeiouAEIOU\";\r\n\tthis.alphabets_small = \"abcdefghijklmnopqrstuvwxyz\";\r\n\tthis.alphabets_caps = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\tthis.encryption = this.encryption.bind(this);\r\n\t\r\n\t\r\n  }\r\n  \r\n  \r\n  \r\n  check_vowel(inputx){\r\n\t  var status = false;\r\n\t  var i;\r\n\t\tfor (i = 0 ; i<10 ; i++){\r\n\t\t\tif (inputx == this.vowels[i]){\r\n\t\t\t\tstatus = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\treturn status;\r\n  }\r\n  \r\n  encryption(input,x,y){\r\n\t  \r\n\t  var output = \"\";\r\n\t  var i;\r\n\t  var z;\r\n\t  \r\n\t  for (z=0; z < input.length ; z++){\r\n\t\t  if (input[z] != \" \"){\t\t\t\t\t\t\t\t\t\t\t\t\t// Checking for spaces\r\n\t\t\t  var checkvowel = this.check_vowel(input[z]);\t\t\t\t\t\t// Checking if current alphabet is a vowel or consonant\r\n\t\t\t  if (checkvowel == true) {\t\t\t\t\t\t\t\t\t\t\t// Vowel detected hence move by x number of times\r\n\t\t\t\t  for (i = 0 ; i<26 ; i++){\r\n\t\t\t\t\t  if (input[z] == this.alphabets_small[i]){\r\n\t\t\t\t\t\t  if ((i+x) < 26){\t\t\t\t\t\t\t\t\t\t// Creating a loop within the available alphabets in the array\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_small[i + x];\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  else {\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_small[(i + x)-26]; \r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t  }\r\n\t\t\t\t  }\r\n\t\t\t\t  \r\n\t\t\t\t  for (i = 0 ; i<26 ; i++){\r\n\t\t\t\t\t  if (input[z] == this.alphabets_caps[i]){\r\n\t\t\t\t\t\t if ((i+x) < 26){\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_caps[i + x];\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t else {\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_caps[(i + x)-26]; \r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t  }\r\n\t\t\t\t  }\r\n\t\t\t\t  \r\n\t\t\t  }  \r\n\t\t\t\r\n\t\t\t  \r\n\t\t\t  else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Consonant deteced hence move by y number of times \r\n\t\t\t\t   for (i = 0 ; i<26 ; i++){\r\n\t\t\t\t\t  if (input[z] == this.alphabets_small[i]){\r\n\t\t\t\t\t\t  if ((i+y) < 26){\t\t\t\t\t\t\t\t\t\t// Creating a loop within the available alphabets in the array\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_small[i + y];\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  else {\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_small[(i + y)-26]; \r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t  }\r\n\t\t\t\t  }\r\n\t\t\t\t  \r\n\t\t\t\t  for (i = 0 ; i<26 ; i++){\r\n\t\t\t\t\t  if (input[z] == this.alphabets_caps[i]){\r\n\t\t\t\t\t\t if ((i+y) < 26){\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_caps[i + y];\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t else {\r\n\t\t\t\t\t\t\toutput = output + this.alphabets_caps[(i + y)-26]; \r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t  }\r\n\t\t\t\t  }\r\n\t\t\t  }\r\n\t\t  }\r\n\t\t  \r\n\t\t  else {\r\n\t\t\t  output = output + \" \";\r\n\t\t  }\r\n\t  }\r\n\t\t  return output;\r\n\t  \r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({username: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\t\r\n\tlet randomnum = Math.floor((Math.random() * 88) + 11);\r\n\tvar random = (\"\"+randomnum).split('').map(Number);\r\n\t\r\n\tvar inputstr = this.state.username;\r\n\tvar outputstr = \"\";\t\r\n\t\r\n\tvar valid_inputs = /^[A-Za-z\\s]+$/;\t\t\t\t\t\t\t\t\t// Ensure inputs are either letters or spaces \r\n    if(inputstr.match(valid_inputs)){\r\n\t\toutputstr = this.encryption(inputstr, random[0], random[1]);\r\n\t\tconsole.log(\"Valid\");\r\n\t}\t\r\n\t\r\n\telse {\r\n\t\tconsole.log (\"Invalid\");\r\n\t\toutputstr = \"Invalid Original Text\";\r\n\t}\r\n\t\r\n\tdocument.getElementById(\"encrypt\").innerHTML = \"Encrypted Text: \" + outputstr;\t\r\n\t\r\n\tdocument.getElementById(\"randomnum\").innerHTML = \"Random Key Generated: \" + randomnum;\r\n\tdocument.getElementById(\"oritext\").innerHTML = \"Original Text: \" + inputstr;\r\n\t\r\n\t\r\n  }\r\n  \r\n  \r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Original Text:\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n\t\t<p id=\"randomnum\"></p>\r\n\t\t<p id=\"oritext\"></p>\r\n\t\t<p id=\"encrypt\"></p>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<MyForm />, document.getElementById('root'));"],"sourceRoot":""}